{
    "collab_server" : "",
    "contents" : "\n# Library -----------------------------------------------------------------\nlibrary(openxlsx)\nlibrary(dplyr)\n\nnew_country <- function(){\n  current_teams <- unique(elo_table$Team)\n  elo <- c()\n  for (i in 1:length(current_teams)) {\n    team <- current_teams[i]\n    all_elo <- elo_table[elo_table$Team == team,3]\n    all_elo <- all_elo[length(all_elo)]\n    elo <- c(elo,all_elo)\n    elo_out <- min(elo)\n  }\n  elo_out <- min(elo)\n  return(elo_out)\n}\n\n\n# Import ------------------------------------------------------------------\nfile <- \"Rugby_db.xlsx\"\ntests_cleaned <- readWorkbook(file,\"Tests_cleaned\", cols = 1:10)\ngrounds <- readWorkbook(file, \"Grounds\")\nteams <- readWorkbook(file, \"Teams\")\n\n# Cleaning ----------------------------------------------------------------\n\ntests_cleaned$Match.Date <- as.Date(as.numeric(tests_cleaned$Match.Date), origin = \"1900-01-01\")\ntests_cleaned <- tests_cleaned[!is.na(tests_cleaned$Match.Date),]\ntests_cleaned$Opposition <- sub(\"v \", \"\", tests_cleaned$Opposition)\n\nteams$Team.out[is.na(teams$Team.out)] <- teams$Team.in[is.na(teams$Team.out)]\ntests_cleaned <- left_join(tests_cleaned, teams, by = c(\"Team\" = \"Team.in\"))\ntests_cleaned <- select(tests_cleaned, -c(Team, `Non-country`))\ntests_cleaned <- rename(tests_cleaned, Team = Team.out)\n\ntests_cleaned <- left_join(tests_cleaned, teams, by = c(\"Opposition\" = \"Team.in\"))\ntests_cleaned <- select(tests_cleaned, -c(Opposition, `Non-country`))\ntests_cleaned <- rename(tests_cleaned, Opposition = Team.out)\n\ntests_cleaned <- left_join(tests_cleaned, grounds)\n\ntests_cleaned <- tests_cleaned[!is.na(tests_cleaned$Home.Team),]\ntests_cleaned <- tests_cleaned[!is.na(tests_cleaned$Opposition),]\n\ntests_cleaned$Home_Team <- NA\ntests_cleaned$Away_Team <- NA\n\ntests_cleaned$Home_Team[tests_cleaned$Team == tests_cleaned$Home.Team] <- tests_cleaned$Team[tests_cleaned$Team == tests_cleaned$Home.Team]\ntests_cleaned$Home_Team[tests_cleaned$Opposition == tests_cleaned$Home.Team] <- tests_cleaned$Opposition[tests_cleaned$Opposition == tests_cleaned$Home.Team]\ntests_cleaned$Home_Team[is.na(tests_cleaned$Home_Team)] <- \"Neutral\"\ntests_cleaned$Away_Team[tests_cleaned$Home_Team == \"Neutral\"] <- \"Neutral\"\n\ntests_cleaned$Away_Team[tests_cleaned$Team == tests_cleaned$Home_Team] <- tests_cleaned$Opposition[tests_cleaned$Team == tests_cleaned$Home_Team]\ntests_cleaned$Away_Team[is.na(tests_cleaned$Away_Team)] <- tests_cleaned$Team[is.na(tests_cleaned$Away_Team)]\n\ntests_cleaned$Team_A <- NA\ntests_cleaned$Team_B <- NA\n\ntests_cleaned$Team_A[tests_cleaned$Home_Team != \"Neutral\"] <- tests_cleaned$Home_Team[tests_cleaned$Home_Team != \"Neutral\"]\ntests_cleaned$Team_B[tests_cleaned$Away_Team != \"Neutral\"] <- tests_cleaned$Away_Team[tests_cleaned$Away_Team != \"Neutral\"]\ntests_cleaned$Team_A[is.na(tests_cleaned$Team_A)] <- tests_cleaned$Team[is.na(tests_cleaned$Team_A)]\ntests_cleaned$Team_B[is.na(tests_cleaned$Team_B)] <- tests_cleaned$Opposition[is.na(tests_cleaned$Team_B)]\n\ntests_cleaned$A_points <- NA\ntests_cleaned$B_points <- NA\n\ntests_cleaned$A_points[tests_cleaned$Team == tests_cleaned$Team_A] <- tests_cleaned$For[tests_cleaned$Team == tests_cleaned$Team_A]\ntests_cleaned$B_points[tests_cleaned$Team == tests_cleaned$Team_A] <- tests_cleaned$Aga[tests_cleaned$Team == tests_cleaned$Team_A]\n\ntests_cleaned$A_points[tests_cleaned$Opposition == tests_cleaned$Team_A] <- tests_cleaned$Aga[tests_cleaned$Opposition == tests_cleaned$Team_A]\ntests_cleaned$B_points[tests_cleaned$Opposition == tests_cleaned$Team_A] <- tests_cleaned$For[tests_cleaned$Opposition == tests_cleaned$Team_A]\n\ntests_out <- c()\nfor (i in 2:length(tests_cleaned[,1])) {\n  if(paste0(tests_cleaned$Team_A[i],tests_cleaned$Team_B[i],tests_cleaned$Match.Date[i]) == \n     paste0(tests_cleaned$Team_A[i-1],tests_cleaned$Team_B[i-1],tests_cleaned$Match.Date[i-1])) {\n    tests_out <- rbind(tests_out,tests_cleaned[i,])\n  }\n  if(paste0(tests_cleaned$Team_A[i],tests_cleaned$Team_B[i],tests_cleaned$Match.Date[i]) == \n     paste0(tests_cleaned$Team_B[i-1],tests_cleaned$Team_A[i-1],tests_cleaned$Match.Date[i-1])) {\n    tests_out <- rbind(tests_out,tests_cleaned[i,])\n  }\n}\n\ntests_out$A_points <- as.numeric(tests_out$A_points)\ntests_out$B_points <- as.numeric(tests_out$B_points)\ntests_out$Diff <- tests_out$A_points - tests_out$B_points\ntests_out <- tests_out[!is.na(tests_out$Diff),]\n\ntests_out <- select(tests_out, c(Team_A, Team_B, A_points, B_points, Diff, Ground, Home.Team, Match.Date))\n\n# ELO table setup ---------------------------------------------------------\n\ninital_date <-  as.Date(paste0(\"1\", \"Jan\", \"1900\"), \"%d%b%Y\")\ninital_ELO <- 1500\nmodern_teams <- c(\"England\", \"Wales\")\n\nelo_table <- cbind(inital_date, modern_teams, inital_ELO)\nelo_table <- data.frame(elo_table, stringsAsFactors = F)\nelo_table$inital_date <- inital_date\nelo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)\nelo_table <- rename(elo_table, Date=inital_date)\nelo_table <- rename(elo_table, Team=modern_teams)\nelo_table <- rename(elo_table, ELO=inital_ELO)\nelo_table$Expected_win <- \"\"\nelo_table$Result <- \"\"\nelo_table$Opposition <- \"\"\n# elo_table$Competition <- \"\"\n\n# ELO function ------------------------------------------------------------\n\nk <- 20\n\n# run_elo <- function() {\n\n\nfor (i in 1:length(tests_out[,1])) {\n  \n  current_match <- tests_out[i,]\n  \n  if(current_match$Team_A %in% unique(elo_table$Team)) {\n    elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]\n    elo_home <- elo_home[length(elo_home)]\n  } else {\n    # elo_home <- new_country()\n    elo_home <- 1500\n  }\n  \n  if(current_match$Team_B %in% unique(elo_table$Team)) {\n    elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]\n    elo_away <- elo_away[length(elo_away)]\n  } else {\n    # elo_away <- new_country()\n    elo_away <- 1500\n  }\n  \n  home_q <- 1/(1+10^(elo_home/400))\n  away_q <- 1/(1+10^(elo_away/400))\n  \n  total_q <- home_q + away_q\n  \n  # expected_score_home <- home_q/total_q\n  # expected_score_away <- away_q/total_q\n  \n  expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))\n  expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))\n  \n  if (current_match$Diff > 0) {\n    actual_net_home_score <- 1\n    actual_net_away_score <- 0\n    winning_team_elo <- elo_home\n    losing_team_elo <- elo_away\n    margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))\n  } else if (current_match$Diff < 0) {\n    actual_net_home_score <- 0\n    actual_net_away_score <- 1\n    winning_team_elo <- elo_away\n    losing_team_elo <- elo_home\n    margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))\n  } else {\n    actual_net_home_score <- 0.5\n    actual_net_away_score <- 0.5\n    winning_team_elo <- 0\n    losing_team_elo <- 0\n    margin_of_victory <- 1\n  }\n  \n  if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}\n  \n  new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory\n  new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory\n  \n  # new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)\n  # new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)\n  \n  new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date), \n                            Team=as.character(current_match$Team_A), \n                            ELO=as.numeric(new_elo_home),\n                            Expected_win=as.numeric(expected_score_home),\n                            Result=as.numeric(actual_net_home_score),\n                            Opposition=as.character(current_match$Team_B))\n  \n  elo_table <- rbind(elo_table, new_elo_row)\n  \n  new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date), \n                            Team=as.character(current_match$Team_B), \n                            ELO=as.numeric(new_elo_away),\n                            Expected_win=as.numeric(expected_score_away),\n                            Result=as.numeric(actual_net_away_score),\n                            Opposition=as.character(current_match$Team_A))\n  \n  elo_table <- rbind(elo_table, new_elo_row)\n}\n# }\n\nplot_table <- elo_table\nplot_table$Team <- as.factor(plot_table$Team)\n\n# qplot(Date, ELO, data = plot_table, color = Team, geom = \"line\")\n\nqplot(Date, ELO, data = plot_table[plot_table$Team == \"Georgia\" | plot_table$Team == \"Italy\",], color = Team, geom = \"step\")\n\nnew_six_nations <- plot_table[((plot_table$Team == \"New Zealand\" | plot_table$Team == \"Wales\" |\n                                  plot_table$Team == \"Ireland\" | plot_table$Team == \"France\" |\n                                  plot_table$Team == \"Scotland\" | plot_table$Team == \"Italy\") &\n                                 plot_table$Date > \"1980-01-01\"),]\n\nqplot(Date, ELO, data = new_six_nations, color = Team, geom = \"step\")\n\nnew_six_nations <- plot_table[(plot_table$Team %in% classifications$Six_Nations | plot_table$Team %in% classifications$Tri_Nations) &\n                                 plot_table$Date > \"2000-01-01\",]\n\nqplot(Date, ELO, data = new_six_nations, color = Team, geom = \"step\")",
    "created" : 1499194638310.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "5|26|17|0|\n",
    "hash" : "2683242786",
    "id" : "B49C790E",
    "lastKnownWriteTime" : 1499524347,
    "last_content_update" : 1499524347881,
    "path" : "~/Documents/Rugby_ELO/new_elo.R",
    "project_path" : "new_elo.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}