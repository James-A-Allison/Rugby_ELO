{
    "collab_server" : "",
    "contents" : "current_ratings <- function(elo_table_input = elo_table, teams_in = NA) {\n  elo_table <- elo_table_input\n  output_ratings <- c()\n  teams <- unique(elo_table$Team)\n  if (!is.na(teams_in)) {\n    teams <- teams[teams %in% teams_in]\n  }\n  for (i in 1:length(teams)) {\n    team <- teams[i]\n    elo <- elo_table[elo_table$Team == team,3]\n    elo <- elo[length(elo)]\n    row <- data.frame(Team = as.character(team), \n                      Elo = as.numeric(elo))\n    output_ratings <- rbind(output_ratings, row)\n  }\n  output_ratings <-  output_ratings[order(output_ratings$Elo, decreasing = TRUE),]\n  row.names(output_ratings) <- NULL \n  return(output_ratings)\n}\n\naverage_rating <- function(date_range = NA, teams_in = NA, elo_table_input = elo_table) {\n  dates <- unique(elo_table_input$Date)\n  output_table <- c()\n  for (i in 1:length(dates)) {\n    date <- dates[i]\n    working_elo_table <- elo_table_input[elo_table_input$Date <= date,]\n    mean_elo <- mean(current_ratings(elo_table_input = working_elo_table, teams_in = teams_in)[,2])\n    output_row <- data.frame(Date=as.Date(date),\n                             Average_Elo=as.numeric(mean_elo))\n    output_table <- rbind(output_table, output_row)\n  }\n  return(output_table)\n}\n\noptimise_elo <- function(k = 20) {\n  k <- k\n  inital_date <-  as.Date(paste0(\"1\", \"Jan\", \"1900\"), \"%d%b%Y\")\n  inital_ELO <- 1500\n  modern_teams <- c(\"England\", \"Wales\")\n  \n  elo_table <- cbind(inital_date, modern_teams, inital_ELO)\n  elo_table <- data.frame(elo_table, stringsAsFactors = F)\n  elo_table$inital_date <- inital_date\n  elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)\n  elo_table <- rename(elo_table, Date=inital_date)\n  elo_table <- rename(elo_table, Team=modern_teams)\n  elo_table <- rename(elo_table, ELO=inital_ELO)\n  elo_table$Expected_win <- \"\"\n  elo_table$Result <- \"\"\n  elo_table$Opposition <- \"\"\n  \n  for (i in 1:length(tests_out[,1])) {\n    \n    current_match <- tests_out[i,]\n    \n    if(current_match$Team_A %in% unique(elo_table$Team)) {\n      elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]\n      elo_home <- elo_home[length(elo_home)]\n    } else {\n      elo_home <- 1500\n    }\n    \n    if(current_match$Team_B %in% unique(elo_table$Team)) {\n      elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]\n      elo_away <- elo_away[length(elo_away)]\n    } else {\n      elo_away <- 1500\n    }\n    \n    home_q <- 1/(1+10^(elo_home/400))\n    away_q <- 1/(1+10^(elo_away/400))\n    \n    total_q <- home_q + away_q\n    \n    expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))\n    expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))\n    \n    if (current_match$Diff > 0) {\n      actual_net_home_score <- 1\n      actual_net_away_score <- 0\n      winning_team_elo <- elo_home\n      losing_team_elo <- elo_away\n      margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))\n    } else if (current_match$Diff < 0) {\n      actual_net_home_score <- 0\n      actual_net_away_score <- 1\n      winning_team_elo <- elo_away\n      losing_team_elo <- elo_home\n      margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))\n    } else {\n      actual_net_home_score <- 0.5\n      actual_net_away_score <- 0.5\n      winning_team_elo <- 0\n      losing_team_elo <- 0\n      margin_of_victory <- 1\n    }\n    \n    if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}\n    \n    new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory\n    new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory\n    \n    new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date), \n                              Team=as.character(current_match$Team_A), \n                              ELO=as.numeric(new_elo_home),\n                              Expected_win=as.numeric(expected_score_home),\n                              Result=as.numeric(actual_net_home_score),\n                              Opposition=as.character(current_match$Team_B))\n    \n    elo_table <- rbind(elo_table, new_elo_row)\n    \n    new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date), \n                              Team=as.character(current_match$Team_B), \n                              ELO=as.numeric(new_elo_away),\n                              Expected_win=as.numeric(expected_score_away),\n                              Result=as.numeric(actual_net_away_score),\n                              Opposition=as.character(current_match$Team_A))\n    \n    elo_table <- rbind(elo_table, new_elo_row)\n  }\n  elo_table <- elo_table[is.numeric(elo_table$Result),]\n  elo_table$sum_of_sq_diff <- (elo_table$Expected_win - elo_table$Result)^2\n  return(sum(elo_table$sum_of_sq_diff))\n}\n\ngenerate_fixtures <- function(teams = NA, times_vs_opp = NA) {\n  matches <- data.frame(combn(teams, 2))\n  matches$Slot <- c(\"Team_A\",\"Team_B\")\n  suppressWarnings(matches <- gather(matches, key = Slot))\n  colnames(matches)[2] <- \"Match_number\"\n suppressWarnings(matches <- spread(matches, key = Slot, value = value))  \n  if(times_vs_opp == 1) {return(matches)}\n  else if (times_vs_opp == 2) {return(rbind(matches, matches[,c(1,3,2)]))} #switching columns round not working yet\n  else {print(\"Not ready yet\")}\n}\n\nsim_tournament <- function(fixtures = NA){\n  teams <- unique(c(fixtures$Team_A, fixtures$Team_B))\n  league_table <- data.frame(Team = as.character(teams),\n                             Points = as.numeric(rep(0,length(teams))))\n  \n  for (i in 1:length(fixtures[,1])) {\n    match <- fixtures[i,]\n    team_A <- match$Team_A\n    team_B <- match$Team_B\n    \n    elo_team_A <- current_ratings(teams_in = team_A)[,2]\n    elo_team_B <- current_ratings(teams_in = team_B)[,2]\n    \n    expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))\n    expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))\n    \n    winner <- sample(c(team_A, team_B),\n                     size = 1,\n                     replace = TRUE,\n                     prob = c(expected_score_home, 1-expected_score_home))\n    if (winner == team_A) {\n      league_table$Points[league_table$Team == team_A] <- league_table$Points[league_table$Team == team_A] + 3\n    } else {\n      league_table$Points[league_table$Team == team_B] <- league_table$Points[league_table$Team == team_B] + 3\n    }\n  }\n  league_table <- league_table[order(league_table$Points, decreasing = T),]\n  league_table$Team <- as.character(league_table$Team)\n  return(league_table)\n}\n\nsim_game <- function(teams = NA){\n  \n    team_A <- teams[1]\n    team_B <- teams[2]\n    \n    elo_team_A <- current_ratings(teams_in = team_A)[,2]\n    elo_team_B <- current_ratings(teams_in = team_B)[,2]\n    \n    expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))\n    expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))\n    \n    winner <- sample(c(team_A, team_B),\n                     size = 1,\n                     replace = TRUE,\n                     prob = c(expected_score_home, 1-expected_score_home))\n\n  return(winner)\n}\n",
    "created" : 1499702831453.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2459394033",
    "id" : "4D00A7BC",
    "lastKnownWriteTime" : 1499711319,
    "last_content_update" : 1499711319,
    "path" : "~/Documents/Rugby_ELO/functions.R",
    "project_path" : "functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}