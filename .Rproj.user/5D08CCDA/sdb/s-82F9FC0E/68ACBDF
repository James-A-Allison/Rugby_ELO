{
    "collab_server" : "",
    "contents" : "simulation_out <- data.frame(Team = as.character(),\n                              Progress = as.character())\nall_teams <- unique(elo_table$Team)\nfor (i in 1:10000){\n# Africa qualifying -------------------------------------------------------\n\nAfrica_Gold_cup_2017 <- sim_tournament(readWorkbook(\"Fixtures.xlsx\", \"Africa_Gold_Cup_2017\")) # loser relageted, Morocco enters\nAfrica_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), \"Morocco\"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae\nAfrica_1 <- Africa_Gold_cup_2018$Team[1]\nAfrica_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != \"Morocco\"][2]\nAfrica_repechage <- sim_game(c(Africa_runner_up, \"Morocco\")) # winner enters repechage\n\n\n# Europe qualifying -------------------------------------------------------\n\nRound_four_final_winner <- sim_game(c(\"Portugal\", \"Czech Republic\"))\nRugby_Europe_Championship <- sim_tournament(fixtures = generate_fixtures(teams = c(\"Romania\", \"Spain\", \"Russia\", \"Germany\", \"Belgium\"), times_vs_opp = 1))\nEurope_1 <- Rugby_Europe_Championship$Team[1]\nRugby_Europe_Championship_runner_up <- Rugby_Europe_Championship$Team[2]\nEurope_2 <- sim_game(c(Rugby_Europe_Championship_runner_up, Round_four_final_winner))\n# Asia qualifying ---------------------------------------------------------\nAsian_Rugby_Championship <- sim_tournament(generate_fixtures(teams = c(\"Hong Kong\", \"Malaysia\", \"South Korea\"), times_vs_opp = 2))\nAsian_Rugby_Championship_winner <- Asian_Rugby_Championship$Team[1]\n\n# Americas qualifiying ----------------------------------------------------\n\nAmericas_2 <- sim_game(c(\"Canada\", \"Uruguay\"))\nAmericas_repechage <- c(\"Canada\", \"Uruguay\")[!(c(\"Canada\", \"Uruguay\") %in% Americas_2)]\n\n# Oceania qualifiying -----------------------------------------------------\n\nOceania_Rugby_World_Cup_winner <- sim_game(c(\"Cook Islands\", \"Tahiti\"))\nOceania_2 <- sim_game(c(\"Tonga\", \"Samoa\"))\nOceania_3 <- c(\"Tonga\", \"Samoa\")[!(c(\"Tonga\", \"Samoa\") %in% Oceania_2)]\n\n# Repechage ---------------------------------------------------------------\n\nPlayoff_winner <- sim_game(c(Oceania_3,Europe_2))\neuro_oceania <- c(Oceania_3,Europe_2)[!(c(Oceania_3,Europe_2) %in% Playoff_winner)]\n\noceania_asia <- sim_game(c(Oceania_Rugby_World_Cup_winner,Asian_Rugby_Championship_winner))\n\nRepecharge <- sim_tournament(generate_fixtures(teams = c(euro_oceania, oceania_asia,Africa_repechage,Americas_repechage), times_vs_opp = 1))\nRepecharge <- Repecharge$Team[1]\n\n# World Cup ---------------------------------------------------------------\n\n\n\nPool_A <- sim_tournament(fixtures = generate_fixtures(teams = c(\"Ireland\", \"Scotland\", \"Japan\", Europe_1, Playoff_winner), times_vs_opp = 1))\nPool_B <- sim_tournament(fixtures = generate_fixtures(teams = c(\"New Zealand\", \"South Africa\", \"Italy\", Africa_1, Repecharge), times_vs_opp = 1))\nPool_C <- sim_tournament(fixtures = generate_fixtures(teams = c(\"England\", \"France\", \"Argentina\", \"United States of America\", Oceania_2), times_vs_opp = 1))\nPool_D <- sim_tournament(fixtures = generate_fixtures(teams = c(\"Australia\", \"Wales\", \"Georgia\", \"Fiji\", Americas_2), times_vs_opp = 1))\n\nPool_A_winner <- Pool_A$Team[1]\nPool_A_runner_up <- Pool_A$Team[2]\nPool_A_auto_qualifier <- Pool_A$Team[3]\n\nPool_B_winner <- Pool_B$Team[1]\nPool_B_runner_up <- Pool_B$Team[2]\nPool_B_auto_qualifier <- Pool_B$Team[3]\n\nPool_C_winner <- Pool_C$Team[1]\nPool_C_runner_up <- Pool_C$Team[2]\nPool_C_auto_qualifier <- Pool_C$Team[3]\n\nPool_D_winner <- Pool_D$Team[1]\nPool_D_runner_up <- Pool_D$Team[2]\nPool_D_auto_qualifier <- Pool_D$Team[3]\n\n\nQF1 <- sim_game(c(Pool_A_winner, Pool_B_runner_up))\nQF2 <- sim_game(c(Pool_D_winner, Pool_C_runner_up))\nQF3 <- sim_game(c(Pool_B_winner, Pool_A_runner_up))\nQF4 <- sim_game(c(Pool_C_winner, Pool_D_runner_up))\n\nSF1 <- sim_game(c(QF1, QF2))\nSF2 <- sim_game(c(QF3, QF4))\n\nbronze <- sim_game(c(c(QF1, QF2)[!(c(QF1, QF2) %in% SF1)], c(QF3, QF4)[!(c(QF3, QF4) %in% SF2)]))\nWC <- sim_game(c(SF1, SF2))\n\noutput_progress <- data.frame(Team = as.character(),\n                              Progress = as.character())\nnew_row <- data.frame(Team = as.character(WC),\n                      Progress = as.character(\"Champions\"))\noutput_progress <- rbind(output_progress, new_row)\nnew_row <- data.frame(Team = as.character(c(SF1, SF2)[!(c(SF1, SF2) %in% WC)]),\n                      Progress = as.character(\"Runner up\"))\noutput_progress <- rbind(output_progress, new_row)\nnew_row <- data.frame(Team = as.character(bronze),\n                      Progress = as.character(\"Bronze\"))\noutput_progress <- rbind(output_progress, new_row)\nnew_row <- data.frame(Team = as.character(c(QF1, QF2, QF3, QF4)[!(c(QF1, QF2, QF3, QF4) %in% output_progress$Team)]),\n                      Progress = as.character(\"Fourth place\"))\noutput_progress <- rbind(output_progress, new_row)\nnew_row <- data.frame(Team = as.character(c(Pool_A_winner, Pool_B_runner_up, \n                                            Pool_D_winner, Pool_C_runner_up,\n                                            Pool_B_winner, Pool_A_runner_up,\n                                            Pool_C_winner, Pool_D_runner_up)[!(c(Pool_A_winner, Pool_B_runner_up, \n                                                                                 Pool_D_winner, Pool_C_runner_up,\n                                                                                 Pool_B_winner, Pool_A_runner_up,\n                                                                                 Pool_C_winner, Pool_D_runner_up) %in% output_progress$Team)]),\n                      Progress = as.character(\"Quarter finals\"))\noutput_progress <- rbind(output_progress, new_row)\nnew_row <- data.frame(Team = as.character(c(Pool_A_auto_qualifier, Pool_B_auto_qualifier, \n                                            Pool_C_auto_qualifier, Pool_D_auto_qualifier\n                                            )[!(c(Pool_A_auto_qualifier, Pool_B_auto_qualifier, \n                                                  Pool_C_auto_qualifier, Pool_D_auto_qualifier) %in% output_progress$Team)]),\n                      Progress = as.character(\"Automatic qualifiation for RWC 2021\"))\noutput_progress <- rbind(output_progress, new_row)\nnew_row <- data.frame(Team = as.character(c(Pool_A$Team, Pool_B$Team, \n                                            Pool_C$Team, Pool_D$Team)[!(c(Pool_A$Team, Pool_B$Team, \n                                            Pool_C$Team, Pool_D$Team) %in% output_progress$Team)]),\n                      Progress = as.character(\"Group stage\"))\noutput_progress <- rbind(output_progress, new_row)\nnew_row <- data.frame(Team = as.character(all_teams[!(all_teams %in% output_progress$Team)]),\n                      Progress = as.character(\"Did not qualify\"))\noutput_progress <- rbind(output_progress, new_row)\nsimulation_out <- rbind(simulation_out, output_progress)\nprint(i)\n}\n\nsim_grouped <- aggregate(simulation_out$Progress, by=list(simulation_out$Team, simulation_out$Progress), FUN = length)\ncolnames(sim_grouped) <- c(\"Team\", \"Progress\", \"Chance\")\nsim_grouped$Chance <- sim_grouped$Chance / i * 100\nsim_grouped <- sim_grouped[!(sim_grouped$Progress == \"Did not qualify\" & sim_grouped$Chance == 100),]\n\nplot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Team, y = Chance, fill = Progress))\nplot_ob <- plot_ob + geom_col()\nplot_ob <- \n# plot_ob <- plot_ob + scale_fill_manual(values = c(\"Sky Blue\", \"Gold\", \"Black\", \"Dark Green\"))\nplot_ob\n\n",
    "created" : 1499707614989.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "4|20|12|0|\n13|20|19|85|\n20|18|23|0|\n24|23|28|0|\n",
    "hash" : "2176172826",
    "id" : "68ACBDF",
    "lastKnownWriteTime" : 1499757409,
    "last_content_update" : 1499757409861,
    "path" : "~/Documents/Rugby_ELO/world_cup.R",
    "project_path" : "world_cup.R",
    "properties" : {
        "source_window_id" : "",
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}