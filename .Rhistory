} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
# winning_team_elo <- 0
# losing_team_elo <- 0
# margin_of_victory <- 1
}
# if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
# new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
# new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
# }
plot_table <- elo_table
plot_table$Team <- as.factor(plot_table$Team)
# qplot(Date, ELO, data = plot_table, color = Team, geom = "line")
qplot(Date, ELO, data = plot_table, color = Team, geom = "step")
new_six_nations <- plot_table[((plot_table$Team == "New Zealand" | plot_table$Team == "Wales" |
plot_table$Team == "Ireland" | plot_table$Team == "France" |
plot_table$Team == "Scotland" | plot_table$Team == "Italy") &
plot_table$Date > "1980-01-01"),]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "step")
new_six_nations <- plot_table[plot_table$Team == "New Zealand"  &
plot_table$Date > "2000-01-01",]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "line")
inital_date <-  as.Date(paste0("1", "Jan", "1900"), "%d%b%Y")
inital_ELO <- 1500
modern_teams <- c("England", "Wales")
elo_table <- cbind(inital_date, modern_teams, inital_ELO)
elo_table <- data.frame(elo_table, stringsAsFactors = F)
elo_table$inital_date <- inital_date
elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)
elo_table <- rename(elo_table, Date=inital_date)
elo_table <- rename(elo_table, Team=modern_teams)
elo_table <- rename(elo_table, ELO=inital_ELO)
elo_table$Expected_win <- ""
elo_table$Result <- ""
elo_table$Opposition <- ""
# elo_table$Competition <- ""
# ELO function ------------------------------------------------------------
k <- 20
# run_elo <- function() {
for (i in 1:length(tests_out[,1])) {
current_match <- tests_out[i,]
if(current_match$Team_A %in% unique(elo_table$Team)) {
elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]
elo_home <- elo_home[length(elo_home)]
} else {
# elo_home <- new_country()
elo_home <- 1500
}
if(current_match$Team_B %in% unique(elo_table$Team)) {
elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]
elo_away <- elo_away[length(elo_away)]
} else {
# elo_away <- new_country()
elo_away <- 1500
}
home_q <- 1/(1+10^(elo_home/400))
away_q <- 1/(1+10^(elo_away/400))
total_q <- home_q + away_q
# expected_score_home <- home_q/total_q
# expected_score_away <- away_q/total_q
expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))
expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))
if (current_match$Diff > 0) {
actual_net_home_score <- 1
actual_net_away_score <- 0
# winning_team_elo <- elo_home
# losing_team_elo <- elo_away
# margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else if (current_match$Diff < 0) {
actual_net_home_score <- 0
actual_net_away_score <- 1
# winning_team_elo <- elo_away
# losing_team_elo <- elo_home
# margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
# winning_team_elo <- 0
# losing_team_elo <- 0
# margin_of_victory <- 1
}
# if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
# new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
# new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
# }
plot_table <- elo_table
plot_table$Team <- as.factor(plot_table$Team)
# qplot(Date, ELO, data = plot_table, color = Team, geom = "line")
qplot(Date, ELO, data = plot_table, color = Team, geom = "step")
new_six_nations <- plot_table[((plot_table$Team == "New Zealand" | plot_table$Team == "Wales" |
plot_table$Team == "Ireland" | plot_table$Team == "France" |
plot_table$Team == "Scotland" | plot_table$Team == "Italy") &
plot_table$Date > "1980-01-01"),]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "step")
new_six_nations <- plot_table[plot_table$Team == "New Zealand"  &
plot_table$Date > "2000-01-01",]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "line")
inital_date <-  as.Date(paste0("1", "Jan", "1900"), "%d%b%Y")
inital_ELO <- 1500
modern_teams <- c("England", "Wales")
elo_table <- cbind(inital_date, modern_teams, inital_ELO)
elo_table <- data.frame(elo_table, stringsAsFactors = F)
elo_table$inital_date <- inital_date
elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)
elo_table <- rename(elo_table, Date=inital_date)
elo_table <- rename(elo_table, Team=modern_teams)
elo_table <- rename(elo_table, ELO=inital_ELO)
elo_table$Expected_win <- ""
elo_table$Result <- ""
elo_table$Opposition <- ""
# elo_table$Competition <- ""
# ELO function ------------------------------------------------------------
k <- 20
# run_elo <- function() {
for (i in 1:length(tests_out[,1])) {
current_match <- tests_out[i,]
if(current_match$Team_A %in% unique(elo_table$Team)) {
elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]
elo_home <- elo_home[length(elo_home)]
} else {
# elo_home <- new_country()
elo_home <- 1500
}
if(current_match$Team_B %in% unique(elo_table$Team)) {
elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]
elo_away <- elo_away[length(elo_away)]
} else {
# elo_away <- new_country()
elo_away <- 1500
}
home_q <- 1/(1+10^(elo_home/400))
away_q <- 1/(1+10^(elo_away/400))
total_q <- home_q + away_q
# expected_score_home <- home_q/total_q
# expected_score_away <- away_q/total_q
expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))
expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))
if (current_match$Diff > 0) {
actual_net_home_score <- 1
actual_net_away_score <- 0
# winning_team_elo <- elo_home
# losing_team_elo <- elo_away
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else if (current_match$Diff < 0) {
actual_net_home_score <- 0
actual_net_away_score <- 1
# winning_team_elo <- elo_away
# losing_team_elo <- elo_home
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
# winning_team_elo <- 0
# losing_team_elo <- 0
# margin_of_victory <- 1
}
if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
# new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)
# new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
# }
plot_table <- elo_table
plot_table$Team <- as.factor(plot_table$Team)
# qplot(Date, ELO, data = plot_table, color = Team, geom = "line")
qplot(Date, ELO, data = plot_table, color = Team, geom = "step")
new_six_nations <- plot_table[((plot_table$Team == "New Zealand" | plot_table$Team == "Wales" |
plot_table$Team == "Ireland" | plot_table$Team == "France" |
plot_table$Team == "Scotland" | plot_table$Team == "Italy") &
plot_table$Date > "1980-01-01"),]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "step")
new_six_nations <- plot_table[plot_table$Team == "New Zealand"  &
plot_table$Date > "2000-01-01",]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "line")
inital_date <-  as.Date(paste0("1", "Jan", "1900"), "%d%b%Y")
inital_ELO <- 1500
modern_teams <- c("England", "Wales")
elo_table <- cbind(inital_date, modern_teams, inital_ELO)
elo_table <- data.frame(elo_table, stringsAsFactors = F)
elo_table$inital_date <- inital_date
elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)
elo_table <- rename(elo_table, Date=inital_date)
elo_table <- rename(elo_table, Team=modern_teams)
elo_table <- rename(elo_table, ELO=inital_ELO)
elo_table$Expected_win <- ""
elo_table$Result <- ""
elo_table$Opposition <- ""
# elo_table$Competition <- ""
# ELO function ------------------------------------------------------------
k <- 20
# run_elo <- function() {
for (i in 1:length(tests_out[,1])) {
current_match <- tests_out[i,]
if(current_match$Team_A %in% unique(elo_table$Team)) {
elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]
elo_home <- elo_home[length(elo_home)]
} else {
# elo_home <- new_country()
elo_home <- 1500
}
if(current_match$Team_B %in% unique(elo_table$Team)) {
elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]
elo_away <- elo_away[length(elo_away)]
} else {
# elo_away <- new_country()
elo_away <- 1500
}
home_q <- 1/(1+10^(elo_home/400))
away_q <- 1/(1+10^(elo_away/400))
total_q <- home_q + away_q
# expected_score_home <- home_q/total_q
# expected_score_away <- away_q/total_q
expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))
expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))
if (current_match$Diff > 0) {
actual_net_home_score <- 1
actual_net_away_score <- 0
# winning_team_elo <- elo_home
# losing_team_elo <- elo_away
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else if (current_match$Diff < 0) {
actual_net_home_score <- 0
actual_net_away_score <- 1
# winning_team_elo <- elo_away
# losing_team_elo <- elo_home
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
# winning_team_elo <- 0
# losing_team_elo <- 0
margin_of_victory <- 1
}
if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
# new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)
# new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
# }
plot_table <- elo_table
plot_table$Team <- as.factor(plot_table$Team)
# qplot(Date, ELO, data = plot_table, color = Team, geom = "line")
qplot(Date, ELO, data = plot_table, color = Team, geom = "step")
new_six_nations <- plot_table[((plot_table$Team == "New Zealand" | plot_table$Team == "Wales" |
plot_table$Team == "Ireland" | plot_table$Team == "France" |
plot_table$Team == "Scotland" | plot_table$Team == "Italy") &
plot_table$Date > "1980-01-01"),]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "step")
new_six_nations <- plot_table[plot_table$Team == "New Zealand"  &
plot_table$Date > "2000-01-01",]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "line")
inital_date <-  as.Date(paste0("1", "Jan", "1900"), "%d%b%Y")
inital_ELO <- 1500
modern_teams <- c("England", "Wales")
elo_table <- cbind(inital_date, modern_teams, inital_ELO)
elo_table <- data.frame(elo_table, stringsAsFactors = F)
elo_table$inital_date <- inital_date
elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)
elo_table <- rename(elo_table, Date=inital_date)
elo_table <- rename(elo_table, Team=modern_teams)
elo_table <- rename(elo_table, ELO=inital_ELO)
elo_table$Expected_win <- ""
elo_table$Result <- ""
elo_table$Opposition <- ""
# elo_table$Competition <- ""
# ELO function ------------------------------------------------------------
k <- 20
# run_elo <- function() {
for (i in 1:length(tests_out[,1])) {
current_match <- tests_out[i,]
if(current_match$Team_A %in% unique(elo_table$Team)) {
elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]
elo_home <- elo_home[length(elo_home)]
} else {
# elo_home <- new_country()
elo_home <- 1500
}
if(current_match$Team_B %in% unique(elo_table$Team)) {
elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]
elo_away <- elo_away[length(elo_away)]
} else {
# elo_away <- new_country()
elo_away <- 1500
}
home_q <- 1/(1+10^(elo_home/400))
away_q <- 1/(1+10^(elo_away/400))
total_q <- home_q + away_q
# expected_score_home <- home_q/total_q
# expected_score_away <- away_q/total_q
expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))
expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))
if (current_match$Diff > 0) {
actual_net_home_score <- 1
actual_net_away_score <- 0
# winning_team_elo <- elo_home
# losing_team_elo <- elo_away
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else if (current_match$Diff < 0) {
actual_net_home_score <- 0
actual_net_away_score <- 1
# winning_team_elo <- elo_away
# losing_team_elo <- elo_home
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
# winning_team_elo <- 0
# losing_team_elo <- 0
margin_of_victory <- 1
}
if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
# new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)
# new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
# }
plot_table <- elo_table
plot_table$Team <- as.factor(plot_table$Team)
# qplot(Date, ELO, data = plot_table, color = Team, geom = "line")
qplot(Date, ELO, data = plot_table, color = Team, geom = "step")
new_six_nations <- plot_table[((plot_table$Team == "New Zealand" | plot_table$Team == "Wales" |
plot_table$Team == "Ireland" | plot_table$Team == "France" |
plot_table$Team == "Scotland" | plot_table$Team == "Italy") &
plot_table$Date > "1980-01-01"),]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "step")
new_six_nations <- plot_table[plot_table$Team == "New Zealand"  &
plot_table$Date > "2000-01-01",]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "line")
inital_date <-  as.Date(paste0("1", "Jan", "1900"), "%d%b%Y")
inital_ELO <- 1500
modern_teams <- c("England", "Wales")
elo_table <- cbind(inital_date, modern_teams, inital_ELO)
elo_table <- data.frame(elo_table, stringsAsFactors = F)
elo_table$inital_date <- inital_date
elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)
elo_table <- rename(elo_table, Date=inital_date)
elo_table <- rename(elo_table, Team=modern_teams)
elo_table <- rename(elo_table, ELO=inital_ELO)
elo_table$Expected_win <- ""
elo_table$Result <- ""
elo_table$Opposition <- ""
# elo_table$Competition <- ""
# ELO function ------------------------------------------------------------
k <- 20
# run_elo <- function() {
for (i in 1:length(tests_out[,1])) {
current_match <- tests_out[i,]
if(current_match$Team_A %in% unique(elo_table$Team)) {
elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]
elo_home <- elo_home[length(elo_home)]
} else {
# elo_home <- new_country()
elo_home <- 1500
}
if(current_match$Team_B %in% unique(elo_table$Team)) {
elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]
elo_away <- elo_away[length(elo_away)]
} else {
# elo_away <- new_country()
elo_away <- 1500
}
home_q <- 1/(1+10^(elo_home/400))
away_q <- 1/(1+10^(elo_away/400))
total_q <- home_q + away_q
# expected_score_home <- home_q/total_q
# expected_score_away <- away_q/total_q
expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))
expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))
if (current_match$Diff > 0) {
actual_net_home_score <- 1
actual_net_away_score <- 0
winning_team_elo <- elo_home
losing_team_elo <- elo_away
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else if (current_match$Diff < 0) {
actual_net_home_score <- 0
actual_net_away_score <- 1
winning_team_elo <- elo_away
losing_team_elo <- elo_home
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
winning_team_elo <- 0
losing_team_elo <- 0
margin_of_victory <- 1
}
if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
# new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)
# new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
# }
plot_table <- elo_table
plot_table$Team <- as.factor(plot_table$Team)
# qplot(Date, ELO, data = plot_table, color = Team, geom = "line")
qplot(Date, ELO, data = plot_table, color = Team, geom = "step")
new_six_nations <- plot_table[((plot_table$Team == "New Zealand" | plot_table$Team == "Wales" |
plot_table$Team == "Ireland" | plot_table$Team == "France" |
plot_table$Team == "Scotland" | plot_table$Team == "Italy") &
plot_table$Date > "1980-01-01"),]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "step")
new_six_nations <- plot_table[plot_table$Team == "New Zealand"  &
plot_table$Date > "2000-01-01",]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "line")
source('~/Documents/Rugby_ELO/classification_lists.R', echo=TRUE)
new_six_nations <- plot_table[(plot_table$Team %in% classifications$Six_Nations | plot_table$Team %in% classifications$Tri_Nations) &
plot_table$Date > "2000-01-01",]
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "line")
qplot(Date, ELO, data = new_six_nations, color = Team, geom = "step")
qplot(Date, ELO, data = plot_table, color = Team, geom = "step")
qplot(Date, ELO, data = plot_table[plot_table$Team == "Wales",], color = Team, geom = "step")
qplot(Date, ELO, data = plot_table[plot_table$Team %in% classifications$Six_Nations | plot_table$Team %in% classifications$Tri_Nations,], color = Team, geom = "step")
qplot(Date, ELO, data = plot_table[plot_table$Team == "Argentina",], color = Team, geom = "step")
qplot(Date, ELO, data = plot_table[plot_table$Team == "Malaysia",], color = Team, geom = "step")
qplot(Date, ELO, data = plot_table[plot_table$Team == "Georgia",], color = Team, geom = "step")
qplot(Date, ELO, data = plot_table[plot_table$Team == "Georgia" | plot_table$Team == "Italy",], color = Team, geom = "step")
