qplot(Date, Average_Elo, data = rbind(six_nations_av, tri_nations_av), color = Team, geom = "step")
View(elo_table)
optimise_elo <- function(k = 20) {
k <- k
inital_date <-  as.Date(paste0("1", "Jan", "1900"), "%d%b%Y")
inital_ELO <- 1500
modern_teams <- c("England", "Wales")
elo_table <- cbind(inital_date, modern_teams, inital_ELO)
elo_table <- data.frame(elo_table, stringsAsFactors = F)
elo_table$inital_date <- inital_date
elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)
elo_table <- rename(elo_table, Date=inital_date)
elo_table <- rename(elo_table, Team=modern_teams)
elo_table <- rename(elo_table, ELO=inital_ELO)
elo_table$Expected_win <- ""
elo_table$Result <- ""
elo_table$Opposition <- ""
for (i in 1:length(tests_out[,1])) {
current_match <- tests_out[i,]
if(current_match$Team_A %in% unique(elo_table$Team)) {
elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]
elo_home <- elo_home[length(elo_home)]
} else {
elo_home <- 1500
}
if(current_match$Team_B %in% unique(elo_table$Team)) {
elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]
elo_away <- elo_away[length(elo_away)]
} else {
elo_away <- 1500
}
home_q <- 1/(1+10^(elo_home/400))
away_q <- 1/(1+10^(elo_away/400))
total_q <- home_q + away_q
expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))
expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))
if (current_match$Diff > 0) {
actual_net_home_score <- 1
actual_net_away_score <- 0
winning_team_elo <- elo_home
losing_team_elo <- elo_away
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else if (current_match$Diff < 0) {
actual_net_home_score <- 0
actual_net_away_score <- 1
winning_team_elo <- elo_away
losing_team_elo <- elo_home
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
winning_team_elo <- 0
losing_team_elo <- 0
margin_of_victory <- 1
}
if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
elo_table$sum_of_sq_diff <- (elo_table$Expected_win - elo_table$Result)^2
return(sum(elo_table$sum_of_sq_diff))
}
optimise_elo()
View(elo_table)
optimise_elo <- function(k = 20) {
k <- k
inital_date <-  as.Date(paste0("1", "Jan", "1900"), "%d%b%Y")
inital_ELO <- 1500
modern_teams <- c("England", "Wales")
elo_table <- cbind(inital_date, modern_teams, inital_ELO)
elo_table <- data.frame(elo_table, stringsAsFactors = F)
elo_table$inital_date <- inital_date
elo_table$inital_ELO <- as.numeric(elo_table$inital_ELO)
elo_table <- rename(elo_table, Date=inital_date)
elo_table <- rename(elo_table, Team=modern_teams)
elo_table <- rename(elo_table, ELO=inital_ELO)
elo_table$Expected_win <- ""
elo_table$Result <- ""
elo_table$Opposition <- ""
for (i in 1:length(tests_out[,1])) {
current_match <- tests_out[i,]
if(current_match$Team_A %in% unique(elo_table$Team)) {
elo_home <- elo_table[elo_table$Team == current_match$Team_A,3]
elo_home <- elo_home[length(elo_home)]
} else {
elo_home <- 1500
}
if(current_match$Team_B %in% unique(elo_table$Team)) {
elo_away <- elo_table[elo_table$Team == current_match$Team_B,3]
elo_away <- elo_away[length(elo_away)]
} else {
elo_away <- 1500
}
home_q <- 1/(1+10^(elo_home/400))
away_q <- 1/(1+10^(elo_away/400))
total_q <- home_q + away_q
expected_score_home <- 1/(1+10^((elo_away-elo_home)/400))
expected_score_away <- 1/(1+10^((elo_home-elo_away)/400))
if (current_match$Diff > 0) {
actual_net_home_score <- 1
actual_net_away_score <- 0
winning_team_elo <- elo_home
losing_team_elo <- elo_away
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else if (current_match$Diff < 0) {
actual_net_home_score <- 0
actual_net_away_score <- 1
winning_team_elo <- elo_away
losing_team_elo <- elo_home
margin_of_victory <- log(abs(current_match$Diff+1))*(2.2/((winning_team_elo-losing_team_elo)*.001+2.2))
} else {
actual_net_home_score <- 0.5
actual_net_away_score <- 0.5
winning_team_elo <- 0
losing_team_elo <- 0
margin_of_victory <- 1
}
if (is.infinite(margin_of_victory)) {margin_of_victory <- 1}
new_elo_home <- elo_home + k*(actual_net_home_score-expected_score_home)*margin_of_victory
new_elo_away <- elo_away + k*(actual_net_away_score-expected_score_away)*margin_of_victory
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_A),
ELO=as.numeric(new_elo_home),
Expected_win=as.numeric(expected_score_home),
Result=as.numeric(actual_net_home_score),
Opposition=as.character(current_match$Team_B))
elo_table <- rbind(elo_table, new_elo_row)
new_elo_row <- data.frame(Date=as.Date(current_match$Match.Date),
Team=as.character(current_match$Team_B),
ELO=as.numeric(new_elo_away),
Expected_win=as.numeric(expected_score_away),
Result=as.numeric(actual_net_away_score),
Opposition=as.character(current_match$Team_A))
elo_table <- rbind(elo_table, new_elo_row)
}
elo_table <- elo_table[is.numeric(elo_table$Result),]
elo_table$sum_of_sq_diff <- (elo_table$Expected_win - elo_table$Result)^2
return(sum(elo_table$sum_of_sq_diff))
}
optimise_elo()
qplot(Date, ELO, data = plot_table[plot_table$Team == "Georgia" | plot_table$Team == "Italy",], color = Team, geom = "step")
team_A <- "New Zealand"
team_B <- "England"
elo_team_A <- current_ratings(teams_in = team_A)
elo_team_B <- current_ratings(teams_in = team_B)
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
?binomial
?sample
sample.space <- c(0,1)
theta <- 0.5
N <- 20
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(0,1)
theta <- 0.5
N <- 20
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(0,1)
theta <- 0.5
N <- 20
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(0,1)
theta <- 0.5
N <- 20
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(0,1)
theta <- 0.5
N <- 20
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 20
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 1
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 1
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 1
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 1
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 1
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 1
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
sample.space <- c(team_A,team_B)
theta <- expected_score_home
N <- 1
flips <- sample(sample.space,
size = N,
replace = T,
prob = c(theta, 1-theta))
flips
flips <- sample(sample.space,
size = N,
replace = F,
prob = c(theta, 1-theta))
flips
View(tests_out)
View(elo_table)
library(openxlsx)
library(dplyr)
getSheetNames("Fixtures.xlsx")
fixtures <- readWorkbook("Fixtures.xlsx", sheet = "Rugby_Championship_2017")
fixtures$Date <- aas.Date(as.numeric(fixtures$Date), origin = "1900-01-01")
fixtures$Date <- as.Date(as.numeric(fixtures$Date), origin = "1900-01-01")
fixtures$Date <- as.Date(as.numeric(fixtures$Date), origin = "1900-01-00")
fixtures <- readWorkbook("Fixtures.xlsx", sheet = "Rugby_Championship_2017")
fixtures$Date <- as.Date(as.numeric(fixtures$Date), origin = "1900-01-00")
fixtures <- readWorkbook("Fixtures.xlsx", sheet = "Rugby_Championship_2017")
fixtures$Date <- as.Date(as.numeric(fixtures$Date), origin = "1900-01-03")
fixtures <- readWorkbook("Fixtures.xlsx", sheet = "Rugby_Championship_2017")
fixtures$Date <- as.Date(fixtures$Date, origin = "1900-01-01")
fixtures <- readWorkbook("Fixtures.xlsx", sheet = "Rugby_Championship_2017")
fixtures$Date <- as.Date(fixtures$Date, origin = "1900-01-01") - 2
View(fixtures)
i <- 1
match <- fixtures[i]
match <- fixtures[i,]
rugby_champtionship_table <- data.frame(Team = as.character(unique(fixtures$Team_A)),
Points = as.numeric(rep(0,length(unique(fixtures$Team_A)))))
View(rugby_champtionship_table)
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-theta))
if (winner == team_A) {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] + 3
} else {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] + 3
}
View(rugby_champtionship_table)
rugby_champtionship_table <- data.frame(Team = as.character(unique(fixtures$Team_A)),
Points = as.numeric(rep(0,length(unique(fixtures$Team_A)))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-theta))
if (winner == team_A) {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] + 3
} else {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] + 3
}
}
View(rugby_champtionship_table)
rugby_champtionship_table <- rugby_champtionship_table[sort(rugby_champtionship_table$Points),]
rugby_champtionship_table <- data.frame(Team = as.character(unique(fixtures$Team_A)),
Points = as.numeric(rep(0,length(unique(fixtures$Team_A)))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-theta))
if (winner == team_A) {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] + 3
} else {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] + 3
}
}
rugby_champtionship_table <- rugby_champtionship_table[order(rugby_champtionship_table$Points, decreasing = T),]
View(rugby_champtionship_table)
rugby_champtionship_table[2,]
rugby_champtionship_table[3,]
rugby_champtionship_table[4,]
rugby_champtionship_table[1,]
rugby_champtionship_table$Position <- order(rugby_champtionship_table$Points, decreasing = T)
View(rugby_champtionship_table)
j <- 1
simulation_output <- c()
for (i in 1:10000){
rugby_champtionship_table <- data.frame(Team = as.character(unique(fixtures$Team_A)),
Points = as.numeric(rep(0,length(unique(fixtures$Team_A)))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-theta))
if (winner == team_A) {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] + 3
} else {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] + 3
}
}
rugby_champtionship_table <- rugby_champtionship_table[order(rugby_champtionship_table$Points, decreasing = T),]
rugby_champtionship_table$Position <- order(rugby_champtionship_table$Points, decreasing = T)
rugby_champtionship_table$simulation_no <- j
simulation_output <- rbind(simulation_output, rugby_champtionship_table)}
View(simulation_output)
simulation_output <- c()
for (j in 1:10000){
rugby_champtionship_table <- data.frame(Team = as.character(unique(fixtures$Team_A)),
Points = as.numeric(rep(0,length(unique(fixtures$Team_A)))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-theta))
if (winner == team_A) {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] + 3
} else {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] + 3
}
}
rugby_champtionship_table <- rugby_champtionship_table[order(rugby_champtionship_table$Points, decreasing = T),]
rugby_champtionship_table$Position <- order(rugby_champtionship_table$Points, decreasing = T)
rugby_champtionship_table$simulation_no <- j
simulation_output <- rbind(simulation_output, rugby_champtionship_table)}
library(dplyr)
simulation_output %>% group_by(Team, Position)
?count
library(data.table)
test <- aggregate(simulation_output$Position, by=list(Team, Position))
test <- aggregate(simulation_output$Position, by=list(Team, Position), FUN = count)
test <- aggregate(simulation_output$Position, by=list(simulation_output$Team, simulation_output$Position), FUN = count)
test <- aggregate(simulation_output$Position, by=list(simulation_output$Team, simulation_output$Position), FUN = length)
View(test)
sim_grouped <- aggregate(simulation_output$Position, by=list(simulation_output$Team, simulation_output$Position), FUN = length)
colnames(sim_grouped) <- c("Team", "Position", "Chance")
sim_grouped$Chance <- sim_grouped$Chance / 10000
View(sim_grouped)
library(ggplot2)
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_bar(color = Team)
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_bar()
plot_ob
?ggplo2
?ggplot2
?geom_bar
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_col()
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_col(color = Team)
?aes
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team))
plot_ob <- plot_ob + geom_col()
plot_ob
?geom_col
?fill
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob
?legend
?color
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(c("Blue", "Gold", "Black", "Green"))
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(values = c("Blue", "Gold", "Black", "Green"))
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(values = c("Blue", "Gold", "Black", "Green"))
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(values = c("Sky Blue", "Gold", "Black", "Dark Green"))
plot_ob
current_ratings(teams_in = c("South Africa", "Australia"))
current_ratings(teams_in = c("South Africa", "Australia", "New Zealand"))
current_ratings(teams_in = c("South Africa", "Australia", "New Zealand", "Argentina"))
View(elo_table)
sim_tournament <- function(fixtures = NA){
league_table <- data.frame(Team = as.character(unique(fixtures$Team_A)),
Points = as.numeric(rep(0,length(unique(fixtures$Team_A)))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-theta))
if (winner == team_A) {
league_table$Points[league_table$Team == team_A] <- league_table$Points[league_table$Team == team_A] + 3
} else {
league_table$Points[league_table$Team == team_B] <- league_table$Points[league_table$Team == team_B] + 3
}
}
league_table <- league_table[order(league_table$Points, decreasing = T),]
return(league_table)
}
getSheetNames()
library(openxlsx)
getSheetNames("Fixtures.xlsx")
af_gold_cup_17_fx <- readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")
sim_tournament(af_gold_cup_17_fx)
library(gtools)
library(dplyr)
?combn
combn(letters[1:4], 2)
