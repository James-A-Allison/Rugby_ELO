if (winner == team_A) {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_A] + 3
} else {
rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] <- rugby_champtionship_table$Points[rugby_champtionship_table$Team == team_B] + 3
}
}
rugby_champtionship_table <- rugby_champtionship_table[order(rugby_champtionship_table$Points, decreasing = T),]
rugby_champtionship_table$Position <- order(rugby_champtionship_table$Points, decreasing = T)
rugby_champtionship_table$simulation_no <- j
simulation_output <- rbind(simulation_output, rugby_champtionship_table)}
library(dplyr)
simulation_output %>% group_by(Team, Position)
?count
library(data.table)
test <- aggregate(simulation_output$Position, by=list(Team, Position))
test <- aggregate(simulation_output$Position, by=list(Team, Position), FUN = count)
test <- aggregate(simulation_output$Position, by=list(simulation_output$Team, simulation_output$Position), FUN = count)
test <- aggregate(simulation_output$Position, by=list(simulation_output$Team, simulation_output$Position), FUN = length)
View(test)
sim_grouped <- aggregate(simulation_output$Position, by=list(simulation_output$Team, simulation_output$Position), FUN = length)
colnames(sim_grouped) <- c("Team", "Position", "Chance")
sim_grouped$Chance <- sim_grouped$Chance / 10000
View(sim_grouped)
library(ggplot2)
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_bar(color = Team)
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_bar()
plot_ob
?ggplo2
?ggplot2
?geom_bar
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_col()
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance))
plot_ob <- plot_ob + geom_col(color = Team)
?aes
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team))
plot_ob <- plot_ob + geom_col()
plot_ob
?geom_col
?fill
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob
?legend
?color
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(c("Blue", "Gold", "Black", "Green"))
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, color = Team, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(values = c("Blue", "Gold", "Black", "Green"))
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(values = c("Blue", "Gold", "Black", "Green"))
plot_ob
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(values = c("Sky Blue", "Gold", "Black", "Dark Green"))
plot_ob
current_ratings(teams_in = c("South Africa", "Australia"))
current_ratings(teams_in = c("South Africa", "Australia", "New Zealand"))
current_ratings(teams_in = c("South Africa", "Australia", "New Zealand", "Argentina"))
View(elo_table)
sim_tournament <- function(fixtures = NA){
league_table <- data.frame(Team = as.character(unique(fixtures$Team_A)),
Points = as.numeric(rep(0,length(unique(fixtures$Team_A)))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-theta))
if (winner == team_A) {
league_table$Points[league_table$Team == team_A] <- league_table$Points[league_table$Team == team_A] + 3
} else {
league_table$Points[league_table$Team == team_B] <- league_table$Points[league_table$Team == team_B] + 3
}
}
league_table <- league_table[order(league_table$Points, decreasing = T),]
return(league_table)
}
getSheetNames()
library(openxlsx)
getSheetNames("Fixtures.xlsx")
af_gold_cup_17_fx <- readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")
sim_tournament(af_gold_cup_17_fx)
library(gtools)
library(dplyr)
?combn
combn(letters[1:4], 2)
sim_game <- function(teams = NA){
team_A <- teams[1]
team_B <- teams[2]
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-expected_score_home))
return(winner)
}
generate_fixtures <- function(teams = NA, times_vs_opp = NA) {
matches <- data.frame(combn(teams, 2))
matches$Slot <- c("Team_A","Team_B")
matches <- gather(matches, key = Slot)
colnames(matches)[2] <- "Match_number"
matches <- spread(matches, key = Slot, value = value)
if(times_vs_opp == 1) {return(matches)}
else if (times_vs_opp == 2) {return(rbind(matches, matches[,c(1,3,2)]))} #switching columns round not working yet
else {print("Not ready yet")}
}
QF1 <- "New Zealand"
QF2 <- "Wales"
SF1 <- "Wales"
c(QF1, QF2)[! %in% SF1]
c(QF1, QF2)[!( %in% SF1)]
c(QF1, QF2)[!(c(QF1, QF2) %in% SF1)]
View(elo_table)
Oceania_Rugby_World_Cup_winner <- sim_game(c("Cook Islands", "Tahiti"))
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"))) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
library(openxlsx)
library(dplyr)
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"))) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
library(tidyr)
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"))) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
View(Africa_Gold_cup_2018)
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
View(Africa_Gold_cup_2018)
View(Africa_Gold_cup_2017)
c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco")
generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)
sim_tournament <- function(fixtures = NA){
teams <- unique(c(fixtures$Team_A, fixtures$Team_B))
league_table <- data.frame(Team = as.character(teams),
Points = as.numeric(rep(0,length(teams))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-expected_score_home))
if (winner == team_A) {
league_table$Points[league_table$Team == team_A] <- league_table$Points[league_table$Team == team_A] + 3
} else {
league_table$Points[league_table$Team == team_B] <- league_table$Points[league_table$Team == team_B] + 3
}
}
league_table <- league_table[order(league_table$Points, decreasing = T),]
return(league_table)
}
sim_game <- function(teams = NA){
team_A <- teams[1]
team_B <- teams[2]
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-expected_score_home))
return(winner)
}
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
View(Africa_Gold_cup_2018)
Africa_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != "Morocco"][2]
Africa_runner_up
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != "Morocco"][2]
Africa_runner_up
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_1 <- Africa_Gold_cup_2018$Team[1]
Africa_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != "Morocco"][2]
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
sim_tournament <- function(fixtures = NA){
teams <- unique(c(fixtures$Team_A, fixtures$Team_B))
league_table <- data.frame(Team = as.character(teams),
Points = as.numeric(rep(0,length(teams))))
for (i in 1:length(fixtures[,1])) {
match <- fixtures[i,]
team_A <- match$Team_A
team_B <- match$Team_B
elo_team_A <- current_ratings(teams_in = team_A)[,2]
elo_team_B <- current_ratings(teams_in = team_B)[,2]
expected_score_home <- 1/(1+10^((elo_team_B-elo_team_A)/400))
expected_score_away <- 1/(1+10^((elo_team_A-elo_team_B)/400))
winner <- sample(c(team_A, team_B),
size = 1,
replace = TRUE,
prob = c(expected_score_home, 1-expected_score_home))
if (winner == team_A) {
league_table$Points[league_table$Team == team_A] <- league_table$Points[league_table$Team == team_A] + 3
} else {
league_table$Points[league_table$Team == team_B] <- league_table$Points[league_table$Team == team_B] + 3
}
}
league_table <- league_table[order(league_table$Points, decreasing = T),]
league_table$Team <- as.character(league_table$Team)
return(league_table)
}
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_1 <- Africa_Gold_cup_2018$Team[1]
Africa_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != "Morocco"][2]
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
Round_four_final_winner <- sim_game(c("Portugal", "Czech Republic"))
Rugby_Europe_Championship <- sim_tournament(fixtures = generate_fixtures(teams = c("Romania", "Spain", "Russia", "Germany", "Belgium"), times_vs_opp = 1))
Europe_1 <- Rugby_Europe_Championship$Team[1]
Rugby_Europe_Championship_runner_up$Team[2]
Europe_2 <- sim_game(c(Rugby_Europe_Championship_runner_up, Round_four_final_winner))
Rugby_Europe_Championship_runner_up <- Rugby_Europe_Championship$Team[2]
Europe_2 <- sim_game(c(Rugby_Europe_Championship_runner_up, Round_four_final_winner))
Asian_Rugby_Championship <- sim_tournament(generate_fixtures(teams = c("Hong Kong", "Malaysia", "South Korea"), times_vs_opp = 2))
Asian_Rugby_Championship_winner <- Asian_Rugby_Championship$Team[1]
Americas_repechage <- sim_game(c("Canada", "Uruguay"))
Oceania_Rugby_World_Cup_winner <- sim_game(c("Cook Islands", "Tahiti"))
Oceania_2 <- sim_game(c("Tonga", "Samoa"))
Oceania_3 <- c("Tonga", "Samoa")[!(c("Tonga", "Samoa") %in% Oceania_2)]
euro_oceania <- sim_game(c(Oceania_3,Europe_2))
oceania_asia <- sim_game(c(Oceania_Rugby_World_Cup_winner,Asian_Rugby_Championship_winner))
Repecharge <- sim_tournament(generate_fixtures(teams = c(euro_oceania, oceania_asia,Africa_repechage,Americas_repechage), times_vs_opp = 1))
Repecharge <- Repecharge$Team[1]
Pool_A <- sim_tournament(fixtures = generate_fixtures(teams = c("Ireland", "Scotland", "Japan", Europe_1, Playoff_winner), times_vs_opp = 1))
Pool_B <- sim_tournament(fixtures = generate_fixtures(teams = c("New Zealand", "South Africa", "Italy", Africa_1, Repecharge), times_vs_opp = 1))
Pool_C <- sim_tournament(fixtures = generate_fixtures(teams = c("England", "France", "Argentina", "United States of America", Oceana_2), times_vs_opp = 1))
Pool_D <- sim_tournament(fixtures = generate_fixtures(teams = c("Australia", "Wales", "Georgia", "Fiji", Americas_2), times_vs_opp = 1))
# Africa qualifying -------------------------------------------------------
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_1 <- Africa_Gold_cup_2018$Team[1]
Africa_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != "Morocco"][2]
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
# Europe qualifying -------------------------------------------------------
Round_four_final_winner <- sim_game(c("Portugal", "Czech Republic"))
Rugby_Europe_Championship <- sim_tournament(fixtures = generate_fixtures(teams = c("Romania", "Spain", "Russia", "Germany", "Belgium"), times_vs_opp = 1))
Europe_1 <- Rugby_Europe_Championship$Team[1]
Rugby_Europe_Championship_runner_up <- Rugby_Europe_Championship$Team[2]
Europe_2 <- sim_game(c(Rugby_Europe_Championship_runner_up, Round_four_final_winner))
# Asia qualifying ---------------------------------------------------------
Asian_Rugby_Championship <- sim_tournament(generate_fixtures(teams = c("Hong Kong", "Malaysia", "South Korea"), times_vs_opp = 2))
Asian_Rugby_Championship_winner <- Asian_Rugby_Championship$Team[1]
# Americas qualifiying ----------------------------------------------------
Americas_2 <- sim_game(c("Canada", "Uruguay"))
Americas_repechage <- c("Canada", "Uruguay")[!(c("Canada", "Uruguay") %in% Americas_2)]
# Oceania qualifiying -----------------------------------------------------
Oceania_Rugby_World_Cup_winner <- sim_game(c("Cook Islands", "Tahiti"))
Oceania_2 <- sim_game(c("Tonga", "Samoa"))
Oceania_3 <- c("Tonga", "Samoa")[!(c("Tonga", "Samoa") %in% Oceania_2)]
# Repechage ---------------------------------------------------------------
euro_oceania <- sim_game(c(Oceania_3,Europe_2))
oceania_asia <- sim_game(c(Oceania_Rugby_World_Cup_winner,Asian_Rugby_Championship_winner))
Repecharge <- sim_tournament(generate_fixtures(teams = c(euro_oceania, oceania_asia,Africa_repechage,Americas_repechage), times_vs_opp = 1))
Repecharge <- Repecharge$Team[1]
# World Cup ---------------------------------------------------------------
generate_fixtures <- function(teams = NA, times_vs_opp = NA) {
matches <- data.frame(combn(teams, 2))
matches$Slot <- c("Team_A","Team_B")
matches <- gather(matches, key = Slot)
colnames(matches)[2] <- "Match_number"
suppressWarnings(matches <- spread(matches, key = Slot, value = value))
if(times_vs_opp == 1) {return(matches)}
else if (times_vs_opp == 2) {return(rbind(matches, matches[,c(1,3,2)]))} #switching columns round not working yet
else {print("Not ready yet")}
}
# Africa qualifying -------------------------------------------------------
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_1 <- Africa_Gold_cup_2018$Team[1]
Africa_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != "Morocco"][2]
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
# Europe qualifying -------------------------------------------------------
Round_four_final_winner <- sim_game(c("Portugal", "Czech Republic"))
Rugby_Europe_Championship <- sim_tournament(fixtures = generate_fixtures(teams = c("Romania", "Spain", "Russia", "Germany", "Belgium"), times_vs_opp = 1))
Europe_1 <- Rugby_Europe_Championship$Team[1]
Rugby_Europe_Championship_runner_up <- Rugby_Europe_Championship$Team[2]
Europe_2 <- sim_game(c(Rugby_Europe_Championship_runner_up, Round_four_final_winner))
# Asia qualifying ---------------------------------------------------------
Asian_Rugby_Championship <- sim_tournament(generate_fixtures(teams = c("Hong Kong", "Malaysia", "South Korea"), times_vs_opp = 2))
Asian_Rugby_Championship_winner <- Asian_Rugby_Championship$Team[1]
# Americas qualifiying ----------------------------------------------------
Americas_2 <- sim_game(c("Canada", "Uruguay"))
Americas_repechage <- c("Canada", "Uruguay")[!(c("Canada", "Uruguay") %in% Americas_2)]
# Oceania qualifiying -----------------------------------------------------
Oceania_Rugby_World_Cup_winner <- sim_game(c("Cook Islands", "Tahiti"))
Oceania_2 <- sim_game(c("Tonga", "Samoa"))
Oceania_3 <- c("Tonga", "Samoa")[!(c("Tonga", "Samoa") %in% Oceania_2)]
# Repechage ---------------------------------------------------------------
euro_oceania <- sim_game(c(Oceania_3,Europe_2))
oceania_asia <- sim_game(c(Oceania_Rugby_World_Cup_winner,Asian_Rugby_Championship_winner))
Repecharge <- sim_tournament(generate_fixtures(teams = c(euro_oceania, oceania_asia,Africa_repechage,Americas_repechage), times_vs_opp = 1))
Repecharge <- Repecharge$Team[1]
# World Cup ---------------------------------------------------------------
generate_fixtures <- function(teams = NA, times_vs_opp = NA) {
matches <- data.frame(combn(teams, 2))
matches$Slot <- c("Team_A","Team_B")
suppressWarnings(matches <- gather(matches, key = Slot))
colnames(matches)[2] <- "Match_number"
suppressWarnings(matches <- spread(matches, key = Slot, value = value))
if(times_vs_opp == 1) {return(matches)}
else if (times_vs_opp == 2) {return(rbind(matches, matches[,c(1,3,2)]))} #switching columns round not working yet
else {print("Not ready yet")}
}
# Africa qualifying -------------------------------------------------------
Africa_Gold_cup_2017 <- sim_tournament(readWorkbook("Fixtures.xlsx", "Africa_Gold_Cup_2017")) # loser relageted, Morocco enters
Africa_Gold_cup_2018 <- sim_tournament(fixtures = generate_fixtures(teams = c(as.character(Africa_Gold_cup_2017$Team[1:5]), "Morocco"), times_vs_opp = 1)) # winner becomes Africa_1, runner_up goes to Africa_reperchae
Africa_1 <- Africa_Gold_cup_2018$Team[1]
Africa_runner_up <- Africa_Gold_cup_2018$Team[Africa_Gold_cup_2018$Team != "Morocco"][2]
Africa_repechage <- sim_game(c(Africa_runner_up, "Morocco")) # winner enters repechage
# Europe qualifying -------------------------------------------------------
Round_four_final_winner <- sim_game(c("Portugal", "Czech Republic"))
Rugby_Europe_Championship <- sim_tournament(fixtures = generate_fixtures(teams = c("Romania", "Spain", "Russia", "Germany", "Belgium"), times_vs_opp = 1))
Europe_1 <- Rugby_Europe_Championship$Team[1]
Rugby_Europe_Championship_runner_up <- Rugby_Europe_Championship$Team[2]
Europe_2 <- sim_game(c(Rugby_Europe_Championship_runner_up, Round_four_final_winner))
# Asia qualifying ---------------------------------------------------------
Asian_Rugby_Championship <- sim_tournament(generate_fixtures(teams = c("Hong Kong", "Malaysia", "South Korea"), times_vs_opp = 2))
Asian_Rugby_Championship_winner <- Asian_Rugby_Championship$Team[1]
# Americas qualifiying ----------------------------------------------------
Americas_2 <- sim_game(c("Canada", "Uruguay"))
Americas_repechage <- c("Canada", "Uruguay")[!(c("Canada", "Uruguay") %in% Americas_2)]
# Oceania qualifiying -----------------------------------------------------
Oceania_Rugby_World_Cup_winner <- sim_game(c("Cook Islands", "Tahiti"))
Oceania_2 <- sim_game(c("Tonga", "Samoa"))
Oceania_3 <- c("Tonga", "Samoa")[!(c("Tonga", "Samoa") %in% Oceania_2)]
# Repechage ---------------------------------------------------------------
euro_oceania <- sim_game(c(Oceania_3,Europe_2))
oceania_asia <- sim_game(c(Oceania_Rugby_World_Cup_winner,Asian_Rugby_Championship_winner))
Repecharge <- sim_tournament(generate_fixtures(teams = c(euro_oceania, oceania_asia,Africa_repechage,Americas_repechage), times_vs_opp = 1))
Repecharge <- Repecharge$Team[1]
# World Cup ---------------------------------------------------------------
Pool_A <- sim_tournament(fixtures = generate_fixtures(teams = c("Ireland", "Scotland", "Japan", Europe_1, Playoff_winner), times_vs_opp = 1))
Pool_A <- sim_tournament(fixtures = generate_fixtures(teams = c("Ireland", "Scotland", "Japan", Europe_1, Playoff_winner), times_vs_opp = 1))
Pool_B <- sim_tournament(fixtures = generate_fixtures(teams = c("New Zealand", "South Africa", "Italy", Africa_1, Repecharge), times_vs_opp = 1))
Pool_C <- sim_tournament(fixtures = generate_fixtures(teams = c("England", "France", "Argentina", "United States of America", Oceana_2), times_vs_opp = 1))
Pool_D <- sim_tournament(fixtures = generate_fixtures(teams = c("Australia", "Wales", "Georgia", "Fiji", Americas_2), times_vs_opp = 1))
Playoff_winner <- sim_game(c(Oceania_3,Europe_2))
euro_oceania <- c(Oceania_3,Europe_2)[!(c(Oceania_3,Europe_2) %in% Playoff_winner)]
oceania_asia <- sim_game(c(Oceania_Rugby_World_Cup_winner,Asian_Rugby_Championship_winner))
Repecharge <- sim_tournament(generate_fixtures(teams = c(euro_oceania, oceania_asia,Africa_repechage,Americas_repechage), times_vs_opp = 1))
Repecharge <- Repecharge$Team[1]
# World Cup ---------------------------------------------------------------
Pool_A <- sim_tournament(fixtures = generate_fixtures(teams = c("Ireland", "Scotland", "Japan", Europe_1, Playoff_winner), times_vs_opp = 1))
Pool_B <- sim_tournament(fixtures = generate_fixtures(teams = c("New Zealand", "South Africa", "Italy", Africa_1, Repecharge), times_vs_opp = 1))
Pool_C <- sim_tournament(fixtures = generate_fixtures(teams = c("England", "France", "Argentina", "United States of America", Oceana_2), times_vs_opp = 1))
Pool_D <- sim_tournament(fixtures = generate_fixtures(teams = c("Australia", "Wales", "Georgia", "Fiji", Americas_2), times_vs_opp = 1))
Pool_A <- sim_tournament(fixtures = generate_fixtures(teams = c("Ireland", "Scotland", "Japan", Europe_1, Playoff_winner), times_vs_opp = 1))
Pool_B <- sim_tournament(fixtures = generate_fixtures(teams = c("New Zealand", "South Africa", "Italy", Africa_1, Repecharge), times_vs_opp = 1))
Pool_C <- sim_tournament(fixtures = generate_fixtures(teams = c("England", "France", "Argentina", "United States of America", Oceania_2), times_vs_opp = 1))
Pool_D <- sim_tournament(fixtures = generate_fixtures(teams = c("Australia", "Wales", "Georgia", "Fiji", Americas_2), times_vs_opp = 1))
Pool_A_winner <- Pool_A$Team[1]
Pool_A_runner_up <- Pool_A$Team[2]
Pool_A_auto_qualifier <- Pool_A$Team[3]
Pool_B_winner <- Pool_B$Team[1]
Pool_B_runner_up <- Pool_B$Team[2]
Pool_B_auto_qualifier <- Pool_B$Team[3]
Pool_C_winner <- Pool_C$Team[1]
Pool_C_runner_up <- Pool_C$Team[2]
Pool_C_auto_qualifier <- Pool_C$Team[3]
Pool_D_winner <- Pool_D$Team[1]
Pool_D_runner_up <- Pool_D$Team[2]
Pool_D_auto_qualifier <- Pool_D$Team[3]
QF1 <- sim_game(c(Pool_A_winner, Pool_B_runner_up))
QF2 <- sim_game(c(Pool_D_winner, Pool_C_runner_up))
QF3 <- sim_game(c(Pool_B_winner, Pool_A_runner_up))
QF4 <- sim_game(c(Pool_C_winner, Pool_D_runner_up))
SF1 <- sim_game(c(QF1, QF2))
SF2 <- sim_game(c(QF3, QF4))
bronze <- sim_game(c(c(QF1, QF2)[!(c(QF1, QF2) %in% SF1)], c(QF3, QF4)[!(c(QF3, QF4) %in% SF2)]))
WC <- sim_game(c(SF1, SF2))
output_progress <- data.frame(Team = as.character(),
Progress = as.character())
output_progress <- rbind(output_progress, cbind(WC, "Champions"))
output_progress <- data.frame(Team = as.character(),
Progress = as.character())
new_row <- data.frame(Team = as.character(WC),
Progress = as.character("Champions"))
output_progress <- rbind(output_progress, new_row)
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Position, y = Chance, fill = Team))
plot_ob <- plot_ob + geom_col()
plot_ob <- plot_ob + scale_fill_manual(values = c("Sky Blue", "Gold", "Black", "Dark Green"))
plot_ob
new_row <- data.frame(Team = as.character(c(SF1, SF2)[!(c(SF1, SF2) %in% WC)]),
Progress = as.character("Finalist"))
output_progress <- rbind(output_progress, new_row)
View(output_progress)
new_row <- data.frame(Team = as.character(c(QF1, QF2, QF3, QF4)[!(c(QF1, QF2, QF3, QF4) %in% output_progress$Team)]),
Progress = as.character("Fourth place"))
o
View(new_row)
output_progress <- data.frame(Team = as.character(),
Progress = as.character())
new_row <- data.frame(Team = as.character(WC),
Progress = as.character("Champions"))
output_progress <- rbind(output_progress, new_row)
new_row <- data.frame(Team = as.character(c(SF1, SF2)[!(c(SF1, SF2) %in% WC)]),
Progress = as.character("Runner up"))
output_progress <- rbind(output_progress, new_row)
new_row <- data.frame(Team = as.character(bronze),
Progress = as.character("Bronze"))
output_progress <- rbind(output_progress, new_row)
new_row <- data.frame(Team = as.character(c(QF1, QF2, QF3, QF4)[!(c(QF1, QF2, QF3, QF4) %in% output_progress$Team)]),
Progress = as.character("Fourth place"))
output_progress <- rbind(output_progress, new_row)
View(output_progress)
new_row <- data.frame(Team = as.character(c(Pool_A_winner, Pool_B_runner_up,
Pool_D_winner, Pool_C_runner_up,
Pool_B_winner, Pool_A_runner_up,
Pool_C_winner, Pool_D_runner_up)[!(c(Pool_A_winner, Pool_B_runner_up,
Pool_D_winner, Pool_C_runner_up,
Pool_B_winner, Pool_A_runner_up,
Pool_C_winner, Pool_D_runner_up) %in% output_progress$Team)]),
Progress = as.character("Quarter finals"))
o
View(new_row)
output_progress <- rbind(output_progress, new_row)
View(output_progress)
new_row <- data.frame(Team = as.character(c(Pool_A_auto_qualifier, Pool_B_auto_qualifier,
Pool_C_auto_qualifier, Pool_D_auto_qualifier
)[!(c(Pool_A_auto_qualifier, Pool_B_auto_qualifier,
Pool_C_auto_qualifier, Pool_D_auto_qualifier) %in% output_progress$Team)]),
Progress = as.character("Automatic qualifiation for RWC 2021"))
output_progress <- rbind(output_progress, new_row)
new_row <- data.frame(Team = as.character(c(Pool_A$Team, Pool_B$Team,
Pool_C$Team, Pool_D$Team)[!(c(Pool_A$Team, Pool_B$Team,
Pool_C$Team, Pool_D$Team) %in% output_progress$Team)]),
Progress = as.character("Automatic qualifiation for RWC 2021"))
View(new_row)
new_row <- data.frame(Team = as.character(c(Pool_A$Team, Pool_B$Team,
Pool_C$Team, Pool_D$Team)[!(c(Pool_A$Team, Pool_B$Team,
Pool_C$Team, Pool_D$Team) %in% output_progress$Team)]),
Progress = as.character("Group stage"))
output_progress <- rbind(output_progress, new_row)
View(output_progress)
source('~/Documents/Rugby_ELO/world_cup.R', echo=TRUE)
sim_grouped <- aggregate(simulation_out$Progress, by=list(simulation_out$Team, simulation_out$Progress), FUN = length)
colnames(sim_grouped) <- c("Team", "Progress", "Chance")
sim_grouped$Chance <- sim_grouped$Chance / 10000
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Team, y = Chance, fill = Progress))
plot_ob <- plot_ob + geom_col()
# plot_ob <- plot_ob + scale_fill_manual(values = c("Sky Blue", "Gold", "Black", "Dark Green"))
plot_ob
library(ggplot2)
sim_grouped <- aggregate(simulation_out$Progress, by=list(simulation_out$Team, simulation_out$Progress), FUN = length)
colnames(sim_grouped) <- c("Team", "Progress", "Chance")
sim_grouped$Chance <- sim_grouped$Chance / 10000
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Team, y = Chance, fill = Progress))
plot_ob <- plot_ob + geom_col()
# plot_ob <- plot_ob + scale_fill_manual(values = c("Sky Blue", "Gold", "Black", "Dark Green"))
plot_ob
sim_grouped <- aggregate(simulation_out$Progress, by=list(simulation_out$Team, simulation_out$Progress), FUN = length)
colnames(sim_grouped) <- c("Team", "Progress", "Chance")
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Team, y = Chance, fill = Progress))
plot_ob <- plot_ob + geom_col()
# plot_ob <- plot_ob + scale_fill_manual(values = c("Sky Blue", "Gold", "Black", "Dark Green"))
plot_ob
View(sim_grouped)
sim_grouped$Chance <- sim_grouped$Chance / i
sim_grouped <- aggregate(simulation_out$Progress, by=list(simulation_out$Team, simulation_out$Progress), FUN = length)
colnames(sim_grouped) <- c("Team", "Progress", "Chance")
sim_grouped$Chance <- sim_grouped$Chance / i * 100
source('~/Documents/Rugby_ELO/world_cup.R', echo=TRUE)
View(sim_grouped)
source('~/Documents/Rugby_ELO/world_cup.R', echo=TRUE)
View(sim_grouped)
sim_grouped <- sim_grouped[!(sim_grouped$Progress == "Did not qualify" & sim_grouped$Chance == 100),]
plot_ob <- ggplot(data = sim_grouped, mapping = aes(x = Team, y = Chance, fill = Progress))
plot_ob <- plot_ob + geom_col()
# plot_ob <- plot_ob + scale_fill_manual(values = c("Sky Blue", "Gold", "Black", "Dark Green"))
plot_ob
?labeller
View(sim_grouped)
?qplot
qplot(Date, Elo, data = elo_table[elo_table$Team == "South Africa"])
library(ggplot2)
qplot(Date, Elo, data = elo_table[elo_table$Team == "South Africa"])
qplot(Date, Elo, data = elo_table[elo_table$Team == "South Africa",])
qplot(Date, ELO, data = elo_table[elo_table$Team == "South Africa",])
qplot(Date, ELO, data = elo_table[elo_table$Team == "South Africa",], geom = step)
qplot(Date, ELO, data = elo_table[elo_table$Team == "South Africa",], geom = "step")
qplot(Date, ELO, data = elo_table[elo_table$Team == "France",], geom = "step")
?write.csv
write.csv(elo_table, "elo_table.csv", row.names = F)
list.files(full.names = T)
setwd("~/")
setwd("~/Documents/Rugby_ELO")
